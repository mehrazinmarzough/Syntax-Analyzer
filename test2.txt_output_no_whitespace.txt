0: // A function to test various aspects of the programming language -> T_Comment
66: void -> T_Id
71: test_function -> T_Id
84: ( -> T_LP
85: int -> T_Int
89: a -> T_Id
90: , -> T_Comma
92: int -> T_Int
96: b -> T_Id
97: , -> T_Comma
99: bool -> T_Bool
104: c -> T_Id
105: ) -> T_RP
107: { -> T_LC
113: if -> T_If
116: ( -> T_LP
117: c -> T_Id
119: == -> T_ROp_E
122: true -> T_True
126: ) -> T_RP
128: { -> T_LC
138: // Calculate and print the sum of a and b -> T_Comment
188: int -> T_Int
192: _sum -> T_Id
197: = -> T_Assign
199: a -> T_Id
201: + -> T_AOp_PL
203: b -> T_Id
204: ; -> T_Semicolon
214: print -> T_Print
219: ( -> T_LP
220: "Sum: " -> T_String
227: , -> T_Comma
229: sum -> T_Id
232: ) -> T_RP
233: ; -> T_Semicolon
239: } -> T_RC
241: else -> T_Else
246: { -> T_LC
256: // Calculate and print the difference of a and b -> T_Comment
313: int -> T_Int
317: difference -> T_Id
328: = -> T_Assign
330: a -> T_Id
332: - -> T_AOp_MN
334: b -> T_Id
335: ; -> T_Semicolon
345: print -> T_Print
350: ( -> T_LP
351: "Difference: " -> T_String
365: , -> T_Comma
367: difference -> T_Id
377: ) -> T_RP
378: ; -> T_Semicolon
384: } -> T_RC
386: } -> T_RC
389: int -> T_Int
393: main -> T_Id
397: ( -> T_LP
398: ) -> T_RP
400: { -> T_LC
406: // Initialize variables of different types -> T_Comment
453: int -> T_Int
457: _integer_var -> T_Id
470: = -> T_Assign
472: 10 -> T_Decimal
474: ; -> T_Semicolon
480: char -> T_Char
485: _char_var -> T_Id
495: = -> T_Assign
497: 'A' -> T_Character
500: ; -> T_Semicolon
506: bool -> T_Bool
511: bool_var -> T_Id
520: = -> T_Assign
522: true -> T_True
526: ; -> T_Semicolon
532: string_var -> T_Id
543: = -> T_Assign
545: "Hello, world!" -> T_String
560: ; -> T_Semicolon
566: const -> T_Id
572: char -> T_Char
576: * -> T_AOp_ML
578: const_char_ptr -> T_Id
593: = -> T_Assign
595: "This is a constant string." -> T_String
623: ; -> T_Semicolon
630: // Print the values of variables -> T_Comment
667: print -> T_Print
672: ( -> T_LP
673: "Integer variable: " -> T_String
693: , -> T_Comma
695: integer_var -> T_Id
706: ) -> T_RP
707: ; -> T_Semicolon
713: print -> T_Print
718: ( -> T_LP
719: "Double variable: " -> T_String
738: , -> T_Comma
740: double_var -> T_Id
750: ) -> T_RP
751: ; -> T_Semicolon
757: print -> T_Print
762: ( -> T_LP
763: "Character variable: " -> T_String
785: , -> T_Comma
787: char_var -> T_Id
795: ) -> T_RP
796: ; -> T_Semicolon
802: print -> T_Print
807: ( -> T_LP
808: "String variable: " -> T_String
827: , -> T_Comma
829: string_var -> T_Id
839: ) -> T_RP
840: ; -> T_Semicolon
846: print -> T_Print
851: ( -> T_LP
852: "Constant character pointer: " -> T_String
882: , -> T_Comma
884: const_char_ptr -> T_Id
898: ) -> T_RP
899: ; -> T_Semicolon
906: // Perform arithmetic operations -> T_Comment
943: int -> T_Int
947: _num1 -> T_Id
953: = -> T_Assign
955: 20 -> T_Decimal
957: ; -> T_Semicolon
963: int -> T_Int
967: _num2 -> T_Id
973: = -> T_Assign
975: 5 -> T_Decimal
976: ; -> T_Semicolon
982: int -> T_Int
986: _sum -> T_Id
991: = -> T_Assign
993: num1 -> T_Id
998: + -> T_AOp_PL
1000: num2 -> T_Id
1004: ; -> T_Semicolon
1010: int -> T_Int
1014: _difference -> T_Id
1026: = -> T_Assign
1028: num1 -> T_Id
1033: - -> T_AOp_MN
1035: num2 -> T_Id
1039: ; -> T_Semicolon
1045: int -> T_Int
1049: _product -> T_Id
1058: = -> T_Assign
1060: num1 -> T_Id
1065: * -> T_AOp_ML
1067: num2 -> T_Id
1071: ; -> T_Semicolon
1077: int -> T_Int
1081: _remainder -> T_Id
1092: = -> T_Assign
1094: num1 -> T_Id
1099: % -> T_AOp_RM
1101: num2 -> T_Id
1105: ; -> T_Semicolon
1111: int -> T_Int
1115: _power -> T_Id
1122: = -> T_Assign
1124: static_cast -> T_Id
1135: < -> T_ROp_L
1136: int -> T_Int
1139: > -> T_ROp_G
1140: ( -> T_LP
1141: pow -> T_Id
1144: ( -> T_LP
1145: num1 -> T_Id
1149: , -> T_Comma
1151: 2 -> T_Decimal
1152: ) -> T_RP
1153: ) -> T_RP
1154: ; -> T_Semicolon
1161: // Print the results of arithmetic operations -> T_Comment
1211: print -> T_Print
1216: ( -> T_LP
1217: "Sum: " -> T_String
1224: , -> T_Comma
1226: sum -> T_Id
1229: ) -> T_RP
1230: ; -> T_Semicolon
1236: print -> T_Print
1241: ( -> T_LP
1242: "Difference: " -> T_String
1256: , -> T_Comma
1258: difference -> T_Id
1268: ) -> T_RP
1269: ; -> T_Semicolon
1275: print -> T_Print
1280: ( -> T_LP
1281: "Product: " -> T_String
1292: , -> T_Comma
1294: product -> T_Id
1301: ) -> T_RP
1302: ; -> T_Semicolon
1308: print -> T_Print
1313: ( -> T_LP
1314: "Remainder: " -> T_String
1327: , -> T_Comma
1329: remainder -> T_Id
1338: ) -> T_RP
1339: ; -> T_Semicolon
1345: print -> T_Print
1350: ( -> T_LP
1351: "Power: " -> T_String
1360: , -> T_Comma
1362: power -> T_Id
1367: ) -> T_RP
1368: ; -> T_Semicolon
1375: // Test boolean conditions and loops -> T_Comment
1416: for -> T_For
1420: ( -> T_LP
1421: int -> T_Int
1425: i -> T_Id
1427: = -> T_Assign
1429: 0 -> T_Decimal
1430: ; -> T_Semicolon
1432: i -> T_Id
1434: < -> T_ROp_L
1436: 10 -> T_Decimal
1438: ; -> T_Semicolon
1440: + -> T_AOp_PL
1441: + -> T_AOp_PL
1442: i -> T_Id
1443: ) -> T_RP
1445: { -> T_LC
1455: if -> T_If
1458: ( -> T_LP
1459: i -> T_Id
1461: % -> T_AOp_RM
1463: 2 -> T_Decimal
1465: == -> T_ROp_E
1468: 0 -> T_Decimal
1469: ) -> T_RP
1471: { -> T_LC
1485: print -> T_Print
1490: ( -> T_LP
1491: i -> T_Id
1492: , -> T_Comma
1494: " is even." -> T_String
1505: ) -> T_RP
1506: ; -> T_Semicolon
1516: } -> T_RC
1518: else -> T_Else
1523: { -> T_LC
1537: print -> T_Print
1542: ( -> T_LP
1543: i -> T_Id
1544: , -> T_Comma
1546: " is odd." -> T_String
1556: ) -> T_RP
1557: ; -> T_Semicolon
1567: } -> T_RC
1573: } -> T_RC
1580: // Test function calls with different arguments -> T_Comment
1632: test_function -> T_Id
1645: ( -> T_LP
1646: 5 -> T_Decimal
1647: , -> T_Comma
1649: 3 -> T_Decimal
1650: , -> T_Comma
1652: true -> T_True
1656: ) -> T_RP
1657: ; -> T_Semicolon
1663: test_function -> T_Id
1676: ( -> T_LP
1677: 10 -> T_Decimal
1679: , -> T_Comma
1681: 7 -> T_Decimal
1682: , -> T_Comma
1684: false -> T_False
1689: ) -> T_RP
1690: ; -> T_Semicolon
1697: return -> T_Return
1704: 0 -> T_Decimal
1705: ; -> T_Semicolon
1707: } -> T_RC
