0: bool -> T_Bool
5: test_function -> T_Id
18: ( -> T_LP
19: int -> T_Int
23: a -> T_Id
24: , -> T_Comma
26: int -> T_Int
30: b -> T_Id
31: , -> T_Comma
33: bool -> T_Bool
38: c -> T_Id
39: ) -> T_RP
41: { -> T_LC
47: if -> T_If
50: ( -> T_LP
51: c -> T_Id
53: == -> T_ROp_E
56: true -> T_True
60: ) -> T_RP
62: { -> T_LC
72: return -> T_Return
79: a -> T_Id
81: + -> T_AOp_PL
83: b -> T_Id
84: ; -> T_Semicolon
90: } -> T_RC
92: else -> T_Else
97: { -> T_LC
107: return -> T_Return
114: a -> T_Id
116: - -> T_AOp_MN
118: b -> T_Id
119: ; -> T_Semicolon
125: } -> T_RC
127: } -> T_RC
130: int -> T_Int
134: main -> T_Id
138: ( -> T_LP
139: ) -> T_RP
141: { -> T_LC
147: bool -> T_Bool
152: add -> T_Id
156: = -> T_Assign
158: true -> T_True
162: ; -> T_Semicolon
168: char -> T_Char
173: _assign1 -> T_Id
182: = -> T_Assign
184: '=' -> T_Character
187: ; -> T_Semicolon
193: char -> T_Char
198: String_1 -> T_Id
206: [ -> T_LB
207: ] -> T_RB
209: = -> T_Assign
211: " + " -> T_String
216: ; -> T_Semicolon
222: char -> T_Char
227: String_2 -> T_Id
235: [ -> T_LB
236: ] -> T_RB
238: = -> T_Assign
240: " - " -> T_String
245: ; -> T_Semicolon
251: int -> T_Int
255: _num1 -> T_Id
261: = -> T_Assign
263: 10 -> T_Decimal
265: ; -> T_Semicolon
271: int -> T_Int
275: _num2 -> T_Id
281: = -> T_Assign
283: 5 -> T_Decimal
284: ; -> T_Semicolon
290: int -> T_Int
294: _result -> T_Id
302: = -> T_Assign
304: 0 -> T_Decimal
305: ; -> T_Semicolon
312: for -> T_For
316: ( -> T_LP
317: int -> T_Int
321: i -> T_Id
323: = -> T_Assign
325: 0 -> T_Decimal
326: ; -> T_Semicolon
328: i -> T_Id
330: <= -> T_ROp_LE
333: num1 -> T_Id
338: / -> T_AOp_DV
340: 2 -> T_Decimal
341: ; -> T_Semicolon
343: i -> T_Id
345: = -> T_Assign
347: i -> T_Id
349: + -> T_AOp_PL
351: 1 -> T_Decimal
352: ) -> T_RP
354: { -> T_LC
364: for -> T_For
368: ( -> T_LP
369: int -> T_Int
373: j -> T_Id
375: = -> T_Assign
377: 0 -> T_Decimal
378: ; -> T_Semicolon
380: j -> T_Id
382: != -> T_ROp_NE
385: num2 -> T_Id
390: * -> T_AOp_ML
392: -1 -> T_Decimal
394: ; -> T_Semicolon
396: j -> T_Id
398: = -> T_Assign
400: j -> T_Id
402: - -> T_AOp_MN
404: 1 -> T_Decimal
405: ) -> T_RP
407: { -> T_LC
421: _result -> T_Id
429: = -> T_Assign
431: i -> T_Id
433: + -> T_AOp_PL
435: j -> T_Id
436: ; -> T_Semicolon
450: print -> T_Print
455: ( -> T_LP
456: "Result: " -> T_String
466: , -> T_Comma
468: result -> T_Id
474: ) -> T_RP
475: ; -> T_Semicolon
485: } -> T_RC
491: } -> T_RC
498: add -> T_Id
502: = -> T_Assign
504: false -> T_False
509: ; -> T_Semicolon
515: for -> T_For
519: ( -> T_LP
520: int -> T_Int
524: i -> T_Id
526: = -> T_Assign
528: 0 -> T_Decimal
529: ; -> T_Semicolon
531: ! -> T_LOp_NOT
532: ( -> T_LP
533: i -> T_Id
535: == -> T_ROp_E
538: 5 -> T_Decimal
539: ) -> T_RP
540: ; -> T_Semicolon
542: i -> T_Id
544: = -> T_Assign
546: i -> T_Id
548: + -> T_AOp_PL
550: 1 -> T_Decimal
551: ) -> T_RP
553: { -> T_LC
563: for -> T_For
567: ( -> T_LP
568: int -> T_Int
572: j -> T_Id
574: = -> T_Assign
576: 0 -> T_Decimal
577: ; -> T_Semicolon
579: j -> T_Id
581: >= -> T_ROp_GE
584: -5 -> T_Decimal
586: ; -> T_Semicolon
588: j -> T_Id
590: = -> T_Assign
592: j -> T_Id
594: - -> T_AOp_MN
596: 1 -> T_Decimal
597: ) -> T_RP
599: { -> T_LC
613: if -> T_If
616: ( -> T_LP
617: ( -> T_LP
618: i -> T_Id
620: % -> T_AOp_RM
622: 4 -> T_Decimal
623: ) -> T_RP
625: == -> T_ROp_E
628: 0 -> T_Decimal
630: || -> T_LOp_OR
633: ( -> T_LP
634: i -> T_Id
636: % -> T_AOp_RM
638: 3 -> T_Decimal
639: ) -> T_RP
641: == -> T_ROp_E
644: 0 -> T_Decimal
645: ) -> T_RP
663: continue -> T_Continue
671: ; -> T_Semicolon
685: if -> T_If
688: ( -> T_LP
689: j -> T_Id
691: < -> T_ROp_L
693: -4 -> T_Decimal
696: && -> T_LOp_AND
699: i -> T_Id
701: > -> T_ROp_G
703: 3 -> T_Decimal
704: ) -> T_RP
722: break -> T_Break
727: ; -> T_Semicolon
741: _result -> T_Id
749: = -> T_Assign
751: i -> T_Id
753: - -> T_AOp_MN
755: j -> T_Id
756: ; -> T_Semicolon
770: print -> T_Print
775: ( -> T_LP
776: "Result: " -> T_String
786: , -> T_Comma
788: _result -> T_Id
795: ) -> T_RP
796: ; -> T_Semicolon
806: } -> T_RC
812: } -> T_RC
819: print -> T_Print
824: ( -> T_LP
825: "Test string with escaped characters: " -> T_String
864: ) -> T_RP
865: ; -> T_Semicolon
871: print -> T_Print
876: ( -> T_LP
877: "\\n newline, \\t tab, \\r carriage return." -> T_String
921: ) -> T_RP
922: ; -> T_Semicolon
926: print -> T_Print
931: ( -> T_LP
932: "this is\" a whole string no other token like '=' or 'else' or even \\\\comment should be recognized" -> T_String
1033: ) -> T_RP
1034: ; -> T_Semicolon
1037: char -> T_Char
1042: back -> T_Id
1047: = -> T_Assign
1049: '\\' -> T_Character
1053: ; -> T_Semicolon
1056: char -> T_Char
1061: quote -> T_Id
1067: = -> T_Assign
1069: '\'' -> T_Character
1073: ; -> T_Semicolon
1076: int -> T_Int
1080: _123 -> T_Id
1085: = -> T_Assign
1087: 0XABCdef1230 -> T_Hexadecimal
1099: ; -> T_Semicolon
1106: return -> T_Return
1113: 0 -> T_Decimal
1114: ; -> T_Semicolon
1116: } -> T_RC
